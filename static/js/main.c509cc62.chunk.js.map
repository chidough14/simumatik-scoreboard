{"version":3,"sources":["components/ModalComponent.js","components/TableComponent.js","components/Scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["ModalComponent","visible","handleOk","handleCancel","name","setName","title","onOk","onCancel","placeholder","onChange","e","target","value","TableComponent","data","confirmWin","confirmLoss","deleteParticipant","text","id","ArrowUpOutlined","ArrowDownOutlined","CloseOutlined","style","textAlign","colSpan","concat","sort","a","b","wins","losses","map","dt","participants","placement","onConfirm","key","okText","cancelText","onClick","initialData","localStorage","getItem","JSON","parse","Scoreboard","useState","setVisible","setData","useEffect","setItem","stringify","marginBottom","className","type","message","info","findIndex","nwdata","incwin","incrementWin","incloss","decrementWin","filter","newdata","Math","random","toString","substring","App","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c509cc62.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Modal, Input } from 'antd';\r\n\r\nconst ModalComponent = ({visible, handleOk, handleCancel, name, setName}) => {\r\n    return (\r\n        <div>\r\n             <Modal\r\n                title=\"Add Participant\"\r\n                visible={visible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                >\r\n                <Input placeholder=\"Enter Name\" onChange={(e) => setName(e.target.value) } value={name} />\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModalComponent\r\n","import React from 'react'\r\nimport { Popconfirm } from 'antd';\r\nimport {CloseOutlined, ArrowDownOutlined, ArrowUpOutlined} from '@ant-design/icons'\r\n\r\nconst TableComponent = ({data, confirmWin, confirmLoss, deleteParticipant, text}) => {\r\n    return (\r\n        <div>\r\n            <table id=\"scoreboard_table\">\r\n                <th>Participants</th>\r\n                <th>Wins</th>\r\n                <th>Losses</th>\r\n                <th>\r\n                    <ArrowUpOutlined />\r\n                </th>\r\n                <th>\r\n                    <ArrowDownOutlined />\r\n                </th>\r\n                <th>\r\n                        <CloseOutlined />\r\n                </th>\r\n\r\n                { data == \"\" ? <tr><td style={{textAlign: 'center'}} colSpan=\"6\"><h2>No Data Available</h2></td></tr> :\r\n                    [].concat(data).sort((a, b) => (a.wins-a.losses) < (b.wins-b.losses) ? 1 : -1).map(dt => (\r\n                        <tr>\r\n                            <td>{dt.participants}</td>\r\n                            <td>{dt.wins}</td>\r\n                            <td>{dt.losses}</td>\r\n                            <td>\r\n                                <Popconfirm placement=\"top\" title={text} onConfirm={() => confirmWin(dt.key)} okText=\"Yes\" cancelText=\"No\">\r\n                                    <a><ArrowUpOutlined /></a>\r\n                                </Popconfirm>\r\n                            </td>\r\n                            <td>\r\n                                \r\n                                <Popconfirm placement=\"top\" title={text} onConfirm={() => confirmLoss(dt.key)} okText=\"Yes\" cancelText=\"No\">\r\n                                    <a> <ArrowDownOutlined/> </a> \r\n                                </Popconfirm>\r\n                                \r\n                            </td>\r\n                            <td>\r\n                                <CloseOutlined onClick={() => deleteParticipant(dt.key)}/>\r\n                            </td>\r\n                        </tr>\r\n                    ))\r\n                }\r\n            </table>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableComponent\r\n","import React, { useEffect, useState } from 'react'\r\nimport {  Button, message } from 'antd';\r\nimport './Scoreboard.css'\r\nimport ModalComponent from './ModalComponent'\r\nimport TableComponent from './TableComponent';\r\n\r\nconst initialData = localStorage.getItem('data') ? JSON.parse(localStorage.getItem('data')) : []\r\n\r\nconst Scoreboard = () => {\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [name, setName] = useState(\"\")\r\n    const [data, setData] = useState(initialData)\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('data', JSON.stringify(data))\r\n    }, [data])\r\n\r\n    const showModal = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n\r\n    const handleOk = (e) => {\r\n       if(name) {\r\n            setVisible(false)\r\n            const key = Math.random().toString(36).substring(7)\r\n            const newdata = {\r\n                key: key,\r\n                participants: name,\r\n                wins: 0,\r\n                losses: 0\r\n            }\r\n            \r\n            setData(data => ([...data, newdata]))\r\n            setName(\"\")\r\n       }\r\n    }\r\n\r\n    const incrementWin = (key) => {\r\n        const id = data.findIndex(dt => dt.key === key)\r\n\r\n        const nwdata = [...data];\r\n        let incwin = { ...nwdata[id] };\r\n        incwin.wins++;\r\n        nwdata[id] = incwin;\r\n        setData(nwdata);\r\n    }\r\n\r\n    const decrementWin = (key) => {\r\n        const id = data.findIndex(dt => dt.key === key)\r\n\r\n        const nwdata = [...data];\r\n        let incloss = { ...nwdata[id] };\r\n        incloss.losses++;\r\n        nwdata[id] = incloss;\r\n        setData(nwdata);\r\n    }\r\n\r\n    const deleteParticipant = (key) => {\r\n\r\n        setData(data.filter(dt => dt.key !== key))\r\n    }\r\n   \r\n\r\n    const handleCancel = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const text = 'Are you sure to Adjust the score?';\r\n\r\n    function confirmWin(key) {\r\n        message.info('Clicked on Yes.');\r\n        incrementWin(key)\r\n    }\r\n\r\n    function confirmLoss(key) {\r\n        message.info('Clicked on Yes.');\r\n        decrementWin(key)\r\n    }\r\n    return (\r\n        <div>\r\n            <div style={{ marginBottom: 16 }}>\r\n                <h1 className=\"scoreboard_header\">Simumatik Score Board</h1>\r\n                <Button type=\"primary\" onClick={showModal} className=\"scoreboard_button\">\r\n                    Add Player\r\n                </Button>\r\n            </div>\r\n\r\n            <div>\r\n                 <TableComponent \r\n                        data={data} \r\n                        confirmWin={confirmWin} \r\n                        confirmLoss={confirmLoss}\r\n                        deleteParticipant={deleteParticipant}\r\n                        text={text}\r\n                    />\r\n            </div>\r\n\r\n            <ModalComponent \r\n                visible={visible} \r\n                handleCancel={handleCancel}\r\n                handleOk={handleOk}\r\n                name={name}\r\n                setName={setName}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scoreboard\r\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Scoreboard from './components/Scoreboard';\nimport 'antd/dist/antd.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"img_logo\">\n            <img src=\"https://simumatik.com/wp-content/uploads/2020/05/simumatik-full-logo-1.png\"  alt=\"logo\" />\n        </div>\n        <div className=\"wrapper\">\n            <Scoreboard />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}